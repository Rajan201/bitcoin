import pandas as pd

# Load the uploaded dataset
bitcoin_data = pd.read_csv('C:\\Users\\RAJAN KUMAR\\OneDrive\\Desktop\\bitcoin.csv',delimiter=';')

# Display the first few rows to understand the structure
bitcoin_data.head()
  
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Extract relevant columns and clean the data
bitcoin_data = bitcoin_data[['open', 'high', 'low', 'close']].dropna()
bitcoin_data.head()

# Define features (X) and target (y)
X = bitcoin_data[['open', 'high', 'low']]
y = bitcoin_data['close']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.7, label='Predicted vs Actual', color='blue')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', color='red', label='Ideal Fit')
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Bitcoin Price Prediction (Linear Regression)')
plt.legend()
plt.grid(True)
plt.show()
  
# Predict on the test set
y_pred = model.predict(X_test)
y_pred

# Calculate accuracy metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
r2

# Plot actual and predicted prices on the same graph
plt.figure(figsize=(12, 7))
plt.plot(y_test.values, label='Actual Prices', color='blue', linestyle='-', marker='o', alpha=0.7)
plt.plot(y_pred, label='Predicted Prices', color='green', linestyle='--', marker='x', alpha=0.7)
plt.xlabel('Index')
plt.ylabel('Bitcoin Price')
plt.title('Actual vs Predicted Bitcoin Prices')
plt.legend()
plt.grid(True)
plt.show()
